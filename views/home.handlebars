<script type="text/javascript">
    
    // Global Constants
    const selectedTasks = []
    const dialogs = document.getElementsByClassName("descriptionDialog");


    // Handle click anywhere on the taskline
    const handleTaskClick = function(thisTaskID) {

        for(let i=0; i < dialogs.length; i++) {
                if(dialogs[i].open) {
           
        handleDescriptionClick(thisTaskID)

         }
            }  
           
    }

    const handleDescriptionClick = function(thisTaskID) {

    
                

        const duedates = document.getElementsByClassName('tasklineduedate')

        const dialogs = document.getElementsByClassName("descriptionDialog");
        for(let i=0; i < dialogs.length; i++) {
            dialogs[i].close();
        };
        document.getElementById(thisTaskID).show();
        const descriptionButtons = document.getElementsByClassName("descriptionButton");
        for(let i=0; i < descriptionButtons.length; i++) {
            descriptionButtons[i].hidden="true";
        };

        const tasklines = document.getElementsByClassName("taskline");

        if (!event.metaKey) {
            selectedTasks.splice(0, selectedTasks.length);
            for(let i=0; i < tasklines.length; i++) {
            console.log(tasklines[i].id.replace("descriptionButton", ""))
            console.log(selectedTasks)
            tasklines[i].classList.remove("selectedtaskline")
            }

            selectedTasks.push(thisTaskID)
            for(let i=0; i < tasklines.length; i++) {
            console.log(tasklines[i].id.replace("descriptionButton", ""))
            console.log(selectedTasks)
            if (selectedTasks.includes(parseInt(tasklines[i].id.replace("descriptionButton", "")))) {
            tasklines[i].classList.add("selectedtaskline")        
            }
            }

        }

        if (event.metaKey) {
        selectedTasks.push(thisTaskID)
        for(let i=0; i < tasklines.length; i++) {
        console.log(tasklines[i].id.replace("descriptionButton", ""))
        console.log(selectedTasks)
        if (selectedTasks.includes(parseInt(tasklines[i].id.replace("descriptionButton", "")))) {
            tasklines[i].classList.add("selectedtaskline")      
        }
        }
        }

        document.getElementById("taskinput"+thisTaskID).focus();

       

    }

    const handleDescriptionClose = function() {
        const dialogs = document.getElementsByClassName("descriptionDialog");
        for(let i=0; i < dialogs.length; i++) {
            dialogs[i].close();
        };
        const descriptionButtons = document.getElementsByClassName("descriptionButton");
        for(let i=0; i < descriptionButtons.length; i++) {
            descriptionButtons[i].hidden="";
        };
    }


 // Persist dialog changes
    function contentEditPersist(thing) {
    document.getElementById("dialogDescriptionInput"+thing).value = 
    document.getElementById("dialogDescription"+thing).innerHTML;
    return true
    }


   

   

</script>

<div class="container">
<h1 class="dayHeading">Today</h1>
    {{#each todayMessages}}
    {{#ifEquals status "uncompleted"}}
    <div class="taskline descriptionButton" id="descriptionButton{{this.id}}" onClick="handleDescriptionClick({{this.id}})">
        <div class="tasklineleft">
            <form action="completed" method="post" > 
            <input type="text" name="id" value={{this.id}} hidden="true">
            <button type="submit" class="tasklinecompletebutton">
            <span class="tasklinecompletespan">
            <i class="fa-regular fa-circle-check"></i>
            </span>
            </button>
            </form>
            <form action="updatetask" method="post" onchange="submit()">
            {{#ifEquals daily "on"}}
            <input type="checkbox" name="daily" id="daily" checked="on" hidden="true" >
            <span class="tasklinedaily">Daily</span>
            {{else}}
            <input type="checkbox" name="daily" id="daily" hidden="true">
            {{/ifEquals}}
            <input type="text" name="id" value={{this.id}} hidden="true" >
            <input type="text" id="taskinput{{this.id}}" name="title" value="{{title}}" onclick="handleTaskClick({{this.id}})" class="tasklinetitle">
            <input type="text" name="description" id="description" value="{{this.description}}" hidden="true" >
        </div>
        <div>
            {{#ifEquals activeafter ""}}
            <input type="time" name="activeafter" id="activeafter" value="{{this.activeafter}}" hidden="true" >
            {{else}}
            <input type="time" name="activeafter" id="activeafter" value="{{this.activeafter}}" class="tasklineactiveafter">
            {{/ifEquals}}
            <input type="date" name="duedate" id="duedate{{this.id}}" value="{{this.duedate}}" class="tasklineduedate">
            </form>
        </div>
    </div>
</div>
        
    

    <dialog id="{{this.id}}" class="descriptionDialog">
    <div class="dialogclose">
    <span class="dialogclose" onClick="handleDescriptionClose()"><i class="fa-solid fa-chevron-right"></i></span>
    </div>
    <div class="dialogtopline">
    <div>    
    <h1>{{this.title}}</h1>
    </div>
    </div>
    <form  action="updatedialog" method="post" onchange="submit()">
    <input type="text" name="id" value={{this.id}} hidden="true">
    <input type="text"  name="description" id="dialogDescriptionInput{{this.id}}" hidden="true">
    <div id="dialogDescription{{this.id}}" class="dialogDescription" contenteditable onkeyup="contentEditPersist({{this.id}})" data-value="{{this.description}}">
    </div>
    </form>
    </dialog>
        {{/ifEquals}}
        {{/each}}

    

<h1>Upcoming</h1>
    {{#each laterMessages}}
    {{#ifEquals status "uncompleted"}}
    <ul>
    <form action="updatetask" method="post" onchange="submit()">
    <input type="text" name="id" value={{this.id}} hidden="true">
    <input type="text" name="title" value="{{title}}">
    <input type="text" name="description" id="description" value="{{this.description}}">
    {{#ifEquals daily "on"}}
    <input type="checkbox" name="daily" id="daily" checked="on">
    {{else}}
    <input type="checkbox" name="daily" id="daily">
    {{/ifEquals}}
    <input type="date" name="duedate" id="duedate" value="{{this.duedate}}">
    <input type="time" name="activeafter" id="activeafter" value="{{this.activeafter}}">
    </form>

    <form action="completed" method="post"> 
    <input type="text" name="id" value={{this.id}} hidden="true">
    <button type="submit">Complete</button>
    </form>
    </ul>
    {{/ifEquals}}
    {{/each}}

<form action="message" method="post">
    <label for="title">Title</label>
    <input required="true" oninvalid="this.setCustomValidity('Titles are required.')" type="text" name="title" id="title">
    <label for="description">Description</label>
    <input type="text" name="description" id="description">
    <label for="daily">Daily</label>
    <input type="checkbox" name="daily" id="daily">
    <label for="duedate">Due</label>
    <input type="date" name="duedate" id="duedate">
    <label for="activeafter">Active After</label>
    <input type="time" name="activeafter" id="activeafter">
    <button type="submit">Submit</button>
</form>

</div>

<script type="text/javascript">
 // Render HTML in dialog description
    const dialogDescriptions = document.getElementsByClassName("dialogDescription");
        for (let i=0; i < dialogDescriptions.length; i++) {
        const thisid = dialogDescriptions[i].id.replace('dialogDescription','')
        dialogDescriptions[i].innerHTML = dialogDescriptions[i].dataset.value;
        } 
</script>